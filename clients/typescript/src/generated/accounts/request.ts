/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type Request = {
  discriminator: number;
  credential: Address;
  schema: Address;
  signer: Address;
  data: ReadonlyUint8Array;
  nonce: Address;
  expiry: bigint;
};

export type RequestArgs = {
  discriminator: number;
  credential: Address;
  schema: Address;
  signer: Address;
  data: ReadonlyUint8Array;
  nonce: Address;
  expiry: number | bigint;
};

export function getRequestEncoder(): Encoder<RequestArgs> {
  return getStructEncoder([
    ['discriminator', getU8Encoder()],
    ['credential', getAddressEncoder()],
    ['schema', getAddressEncoder()],
    ['signer', getAddressEncoder()],
    ['data', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['nonce', getAddressEncoder()],
    ['expiry', getI64Encoder()],
  ]);
}

export function getRequestDecoder(): Decoder<Request> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['credential', getAddressDecoder()],
    ['schema', getAddressDecoder()],
    ['signer', getAddressDecoder()],
    ['data', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['nonce', getAddressDecoder()],
    ['expiry', getI64Decoder()],
  ]);
}

export function getRequestCodec(): Codec<RequestArgs, Request> {
  return combineCodec(getRequestEncoder(), getRequestDecoder());
}

export function decodeRequest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Request, TAddress>;
export function decodeRequest<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Request, TAddress>;
export function decodeRequest<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Request, TAddress> | MaybeAccount<Request, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getRequestDecoder()
  );
}

export async function fetchRequest<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Request, TAddress>> {
  const maybeAccount = await fetchMaybeRequest(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeRequest<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Request, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeRequest(maybeAccount);
}

export async function fetchAllRequest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Request>[]> {
  const maybeAccounts = await fetchAllMaybeRequest(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeRequest(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Request>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeRequest(maybeAccount));
}
